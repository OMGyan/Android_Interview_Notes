Q:Android中子线程真的不能更新UI吗？

A:有一种特殊情况，如果在onCreate方法中直接子线程更新UI是没有问题的，但是一旦加上延迟就会奔溃，根据奔溃日志分析源码
void checkThread() {
       if (mThread != Thread.currentThread()) {
             throw new CalledFromWrongThreadException(
                    "Only the original thread that created a view hierarchy can touch its views.");
       }
}
得知在访问UI的时候，ViewRootImpl会去检查当前是哪个线程访问的UI，如果不是主线程，那就会抛出如下异常：
Only the original thread that created a view hierarchy can touch its views

日志最后会指向一个特殊方法
void doTraversal() {
    if (mTraversalScheduled) {
        mTraversalScheduled = false;
        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);

        if (mProfile) {
            Debug.startMethodTracing("ViewAncestor");
        }

        performTraversals();

        if (mProfile) {
            Debug.stopMethodTracing();
            mProfile = false;
        }
    }
}
可以看到里面调用了一个performTraversals()方法，View的绘制过程就是从这个performTraversals方法开始的。
根据这个我们知道了，每一次访问了UI，Android都会重新绘制View。那为什么在onCreate中直接更新UI，不会奔溃，通过以上推测，
唯一的解释就是那个时候ViewRootImpl还没有创建出来，所以也就无法检查线程了，
我们接下来的重点就是寻找ViewRootImpl是在哪里，是什么时候创建的。在activitythread找到handleResumeActivity方法如下
final void handleResumeActivity(IBinder token,
        boolean clearHide, boolean isForward, boolean reallyResume) {
    // If we are getting ready to gc after going to the background, well
    // we are back active so skip it.
    unscheduleGcIdler();
    mSomeActivitiesChanged = true;

    // TODO Push resumeArgs into the activity for consideration
    ActivityClientRecord r = performResumeActivity(token, clearHide);

    if (r != null) {
        final Activity a = r.activity;

        //代码省略

            r.activity.mVisibleFromServer = true;
            mNumVisibleActivities++;
            if (r.activity.mVisibleFromClient) {
                r.activity.makeVisible();
            }
        }

      //代码省略    
}
可以看到内部调用了performResumeActivity方法，这个方法看名字肯定是回调onResume方法的入口的，那么我们还是跟进去瞧瞧。
public final ActivityClientRecord performResumeActivity(IBinder token,
        boolean clearHide) {
    ActivityClientRecord r = mActivities.get(token);
    if (localLOGV) Slog.v(TAG, "Performing resume of " + r
            + " finished=" + r.activity.mFinished);
    if (r != null && !r.activity.mFinished) {
    //代码省略
            r.activity.performResume();

    //代码省略

    return r;
}
可以看到r.activity.performResume()这行代码，跟进 performResume方法，如下：
final void performResume() {
    performRestart();

    mFragments.execPendingActions();

    mLastNonConfigurationInstances = null;

    mCalled = false;
    // mResumed is set by the instrumentation
    mInstrumentation.callActivityOnResume(this);

    //代码省略

}
Instrumentation调用了callActivityOnResume方法，callActivityOnResume源码如下：
public void callActivityOnResume(Activity activity) {
    activity.mResumed = true;
    activity.onResume();

    if (mActivityMonitors != null) {
        synchronized (mSync) {
            final int N = mActivityMonitors.size();
            for (int i=0; i<N; i++) {
                final ActivityMonitor am = mActivityMonitors.get(i);
                am.match(activity, activity, activity.getIntent());
            }
        }
    }
}
会发现里面有activity.onResume()，这就证明performResumeActivity方法确实是回调onResume方法的入口。
那么现在我们看回来handleResumeActivity方法，执行完performResumeActivity方法回调了onResume方法后， 
会来到这一块代码：
r.activity.mVisibleFromServer = true;
mNumVisibleActivities++;
if (r.activity.mVisibleFromClient) {
    r.activity.makeVisible();
}
activity调用了makeVisible方法，这应该是让什么显示的吧，跟进去探探。
void makeVisible() {
    if (!mWindowAdded) {
        ViewManager wm = getWindowManager();
        wm.addView(mDecor, getWindow().getAttributes());
        mWindowAdded = true;
    }
    mDecor.setVisibility(View.VISIBLE);
}
往WindowManager中添加DecorView，那现在应该关注的就是WindowManager的addView方法了。而WindowManager是一个接口来的，
我们应该找到WindowManager的实现类才行，而WindowManager的实现类是WindowManagerImpl。
找到了WindowManagerImpl的addView方法，如下：
@Override
public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {
    applyDefaultToken(params);
    mGlobal.addView(view, params, mDisplay, mParentWindow);
}
里面调用了WindowManagerGlobal的addView方法，那现在就锁定 
WindowManagerGlobal的addView方法：
public void addView(View view, ViewGroup.LayoutParams params,
        Display display, Window parentWindow) {

    //代码省略  
    ViewRootImpl root;
    View panelParentView = null;
    //代码省略
        root = new ViewRootImpl(view.getContext(), display);

        view.setLayoutParams(wparams);

        mViews.add(view);
        mRoots.add(root);
        mParams.add(wparams);
    }

    // do this last because it fires off messages to start doing things
    try {
        root.setView(view, wparams, panelParentView);
    } catch (RuntimeException e) {
        // BadTokenException or InvalidDisplayException, clean up.
        synchronized (mLock) {
            final int index = findViewLocked(view, false);
            if (index >= 0) {
                removeViewLocked(index, true);
            }
        }
        throw e;
    }
}
终于击破，ViewRootImpl是在WindowManagerGlobal的addView方法中创建的。
回顾前面的分析，总结一下： 
ViewRootImpl的创建在onResume方法回调之后，而我们直接在onCreate方法中创建了子线程并访问UI，在那个时刻，ViewRootImpl是没有创建的，
无法检测当前线程是否是UI线程，所以程序没有崩溃一样能跑起来，而当我们延迟更新UI后，很明显延迟后ViewRootImpl已经创建了，可以执行checkThread方法检查当前线程。

所以综上所述，Android中子线程真的不能更新UI吗？只能说在ViewRootImpl还没创建出来前，你其实可以在子线程更新UI的，而通过分析源码我们可以知道ViewRootImpl是在activity
第一次启动执行完onResume后创建完的，我们说的一种极端情况就是在onCreate方法中可以这样去做。Android的UI访问是没有加锁的，这样在多个线程访问UI是不安全的。
所以Android中规定只能在UI线程中访问UI，大家有没get到呢
 
 



 
